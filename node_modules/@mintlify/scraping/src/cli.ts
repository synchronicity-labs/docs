#!/usr/bin/env node

/* eslint-disable @typescript-eslint/no-empty-function */
import yargs from 'yargs';
import { hideBin } from 'yargs/helpers';

import { generateOpenApiPages } from './openapi/index.js';
import { scrapePageAutomatically, scrapePageWrapper } from './scraping/scrapePageCommands.js';
import {
  scrapeSectionAutomatically,
  scrapeSectionAxiosWrapper,
  scrapeGitbookSectionCommand,
} from './scraping/scrapeSectionCommands.js';
import { scrapeIntercomPage } from './scraping/site-scrapers/Intercom/scrapeIntercomPage.js';
import { scrapeIntercomSection } from './scraping/site-scrapers/Intercom/scrapeIntercomSection.js';
import { scrapeGitBookPage } from './scraping/site-scrapers/scrapeGitBookPage.js';
import { scrapeReadMePage } from './scraping/site-scrapers/scrapeReadMePage.js';
import { scrapeReadMeSection } from './scraping/site-scrapers/scrapeReadMeSection.js';

yargs(hideBin(process.argv))
  .command(
    'page [url]',
    'Scrapes a page',
    () => {},
    async (argv) => {
      await scrapePageAutomatically(argv);
    }
  )
  .command(
    'gitbook-page [url]',
    'Scrapes a GitBook page',
    () => {},
    async (argv) => {
      await scrapePageWrapper(argv, scrapeGitBookPage);
    }
  )
  .command(
    'readme-page [url]',
    'Scrapes a ReadMe page',
    () => {},
    async (argv) => {
      await scrapePageWrapper(argv, scrapeReadMePage);
    }
  )
  .command(
    'intercom-page [url]',
    'Scrapes a Intercom page',
    () => {},
    async (argv) => {
      await scrapePageWrapper(argv, scrapeIntercomPage);
    }
  )
  .command(
    'section [url]',
    'Scrapes the docs in the section',
    () => {},
    async (argv) => {
      await scrapeSectionAutomatically(argv);
    }
  )
  .command(
    'gitbook-section [url]',
    'Scrapes the Gitbook section',
    () => {},
    async (argv) => {
      await scrapeGitbookSectionCommand(argv);
    }
  )
  .command(
    'readme-section [url]',
    'Scrapes the ReadMe section',
    () => {},
    async (argv) => {
      await scrapeSectionAxiosWrapper(argv, scrapeReadMeSection);
    }
  )
  .command(
    'intercom-section [url]',
    'Scrapes the Intercom section',
    () => {},
    async (argv) => {
      await scrapeSectionAxiosWrapper(argv, scrapeIntercomSection);
    }
  )
  .command(
    'openapi-file <openapiFilename>',
    'Creates MDX files from an OpenAPI spec',
    (yargs) => {
      return yargs
        .positional('openapiFilename', {
          describe: 'The filename of the OpenAPI spec',
          type: 'string',
        })
        .option('writeFiles', {
          describe: 'Whether or not to write the frontmatter files',
          default: true,
          type: 'boolean',
          alias: 'w',
        })
        .option('outDir', {
          describe: 'The folder in which to write any created frontmatter files',
          type: 'string',
          alias: 'o',
        })
        .demandOption('openapiFilename');
    },
    async (argv) => {
      try {
        const { nav } = await generateOpenApiPages(
          argv.openapiFilename,
          argv.writeFiles,
          argv.outDir
        );
        console.log('navigation object suggestion:');
        console.log(JSON.stringify(nav, undefined, 2));
      } catch (error) {
        if (error instanceof Error) {
          console.error(error.message);
        } else {
          console.error(error);
        }
      }
    }
  )
  // Print the help menu when the user enters an invalid command.
  .strictCommands()
  .demandCommand(1, 'Unknown command. See above for the list of supported commands.')

  // Alias option flags --help = -h, --version = -v
  .alias('h', 'help')
  .alias('v', 'version')

  .parse();
